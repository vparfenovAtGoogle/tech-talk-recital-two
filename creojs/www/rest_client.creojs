function RestClient (url) {
	this.query = (function () {
		function createQuery (root) {
			const query = [root]
			const proxy = new Proxy (new Function (), {
				get: function (target, prop) {
					if (prop === 'toJSON') {
						return function () {return query}
					}
					query.push (prop)
					return proxy
				},
				apply: function(target, thisArg, args) {
					query.push (args)
					return proxy
				}
			})
			return proxy
		}
		return new Proxy ({}, {get: (target, prop) => createQuery (prop)})
	}) ()
	this.call = function (query, uri = '/') {
		const args = JSON.stringify (query)
		// print (`Query: ${args}`)
		return new Promise ((resolve, reject) => {
			downloadJSON (`${url}${uri}?func=executeQuery&args=[${args}]`, res => {
				if (res.statusCode === 200) {
					resolve (res.body)
				}
				else {
					reject (res)
				}
			})
		})
	}
	function decodeBody (res) {
		if (res && res.headers && res.body) {
			const contentType = res.headers ['Content-Type']
			if (contentType.toLowerCase ().match (/application\/json/)) {
				res.body = JSON.parse (res.body)
			}
		}
		return res
	}
	this.uploadFile = function ({filePath, fieldName, contentType, args}, uri = '/') {
		fieldName = fieldName || filePath
		// print (`uploading ${filePath} as ${fieldName}`)
		return new Promise ((resolve, reject) => {
			uploadFiles (`${url}${uri}?args=${JSON.stringify (args)}`, {filePath, fieldName, contentType}, res => {
				res = decodeBody (res)
				if (res.statusCode === 200) {
					resolve (res)
				}
				else {
					reject (res)
				}
			})
		})
	}
	this.downloadFile = function ({filePath, args}, uri = '/') {
		return new Promise ((resolve, reject) => {
			try {
				downloadFile (`${url}${uri}?args=${JSON.stringify (args)}`, filePath, res => {
					res = decodeBody (res)
					if (res.statusCode === 200) {
						resolve (res)
					}
					else {
						reject (res)
					}
				})
			}
			catch (ex) {
				reject (ex)
			}
		})
	}
}

if (typeof module !== 'undefined') {
	module.exports = url => new RestClient (url)
}
